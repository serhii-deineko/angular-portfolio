.header {
	position: fixed;
	top: 0;
	z-index: 9999;
	transition: var(--transition);
	background: var(--bg-color);
	width: 100%;
	height: var(--nav-height);
	font-size: 13px;
	font-family: var(--font-mono);

	&__content {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin: 0 auto;
		padding: 0 50px;
		max-width: 1600px;
		height: 100%;
	}
}

.logo {
	transition: var(--transition);
	color: var(--accent-color);
	font-weight: 700;
	font-size: 1.5rem;
	user-select: none;
	text-decoration: none;

	img {
		opacity: 0.9;
		filter: invert(1);
		width: 46px;
	}

	&__text {
		display: inline-block;
		transition: var(--transition);

		&:hover {
			transform: translateY(-3px);
		}
	}
}

::ng-deep .light-mode {
	.logo > img {
		opacity: 0.8 !important;
		filter: unset !important;
	}
}

.nav {
	&__list {
		display: flex;
		align-items: center;
		margin: 0;
		padding: 0;
		list-style: none;
	}

	&__item {
		margin-right: 20px;
		&:last-child {
			margin-right: 0;
		}
	}

	&__link {
		transition: var(--transition);
		padding: 10px;
		color: var(--text);
		white-space: nowrap;

		&.active {
			color: var(--accent-color);
		}

		&:hover {
			color: var(--accent-color);
		}

		&::before {
			margin-right: 5px;
			color: var(--accent-color);
			font-size: 12px;
		}
	}
}

body.light-mode {
	.resume-button:hover {
		background-color: var(--accent-color);
		color: var(--bg-color);
	}
}

.theme-switcher {
	display: flex;
	column-gap: 0.5rem;
	justify-content: center;
	align-items: center;
}
// Remove old theme toggle styles that are no longer needed
.theme-toggle-btn,
.theme-icon {
	display: none;
}

/* Mobile Navigation */
.mobile-nav {
	display: none;
}

.mobile-controls {
	display: flex;
	column-gap: 0.5rem;
	align-items: center;
}

:host ::ng-deep .burger-button {
	transform: scale(0.9);
	transition: var(--transition);
	background: var(--bg);
	width: 90px;
	height: 40px;

	span {
		filter: grayscale(1);
	}

	.mdc-button__label {
		display: flex;
		column-gap: 0.5rem;
		justify-content: space-between;
		align-items: center;
		width: 100%;
		font-weight: 600;
	}
}

.mobile-menu {
	position: fixed;
	top: 0;
	left: 0;
	visibility: hidden;
	opacity: 0;
	z-index: 9999;
	transition:
		opacity 0.3s ease,
		visibility 0.3s ease;

	&.open {
		visibility: visible;
		opacity: 1;
	}

	&__overlay {
		position: fixed;
		top: 0;
		left: 0;
		backdrop-filter: blur(4px);
		background-color: rgba(0, 0, 0, 0.5);
		width: 100vw;
		height: 100vh;
	}

	&__content {
		position: fixed;
		top: 0;
		right: 0;
		transform: translateX(100%);
		transition: transform 0.3s ease;
		border-left: 1px solid var(--border-color);
		background-color: var(--bg-color);
		width: 280px;
		height: 100vh;
		overflow: hidden;

		.mobile-menu.open & {
			transform: translateX(0);
		}
	}

	&__header {
		display: flex;
		flex-wrap: wrap;
		justify-content: flex-end;
		align-items: center;
		gap: 0.5rem;
		padding: 1rem;
	}

	&__list {
		margin: 0;
		padding: 0;
		list-style: none;
	}

	&__item {
		border-bottom: 1px solid var(--border-color);

		&:last-child {
			border-bottom: none;
		}
	}

	&__link {
		display: flex;
		align-items: center;
		transition: var(--transition);
		cursor: pointer;
		border: none;
		background: none;
		padding: 1rem 1.5rem;
		width: 100%;
		color: var(--text);
		font-size: 16px;
		text-decoration: none;

		&.active {
			background-color: rgba(var(--accent-color-rgb), 0.1);
			color: var(--accent-color);
		}

		&:hover {
			background-color: rgba(var(--accent-color-rgb), 0.05);
			color: var(--accent-color);
		}

		.emoji-icon {
			position: relative;
			margin-right: 0.75rem;
			width: 20px;
			height: 20px;
		}

		.emoji-png,
		.emoji-webp {
			position: absolute;
			top: 0;
			left: 0;
			transition: opacity var(--transition);
			width: 20px;
			height: 20px;
		}

		.emoji-png {
			opacity: 1;
		}

		.emoji-webp {
			opacity: 0;
		}

		&:hover {
			.emoji-png {
				opacity: 0;
			}

			.emoji-webp {
				opacity: 1;
			}
		}
	}
}

/* Responsive adjustments */
@media (max-width: 1024px) {
	.header__content {
		padding: 1rem;
	}

	.desktop-nav {
		display: none;
	}

	.mobile-nav {
		display: flex;
		align-items: center;
	}
}

::ng-deep body.dark-mode {
	.burger-button {
		background-color: #454545 !important;

		.mdc-button__label {
			color: #d1d1d1 !important;
		}
	}

	.burger-button {
		.mat-mdc-button-ripple > * {
			opacity: 0.1;
			background: var(--accent-color) !important;
		}
		.mat-mdc-button-persistent-ripple::before {
			background: var(--border-color) !important;
		}
	}
}

:host ::ng-deep .emoji-seeker button {
	display: flex;
	position: relative;
	column-gap: 0.5rem;
	--bright-yellow: rgb(255, 204, 0);
	--bright-blue: rgb(0, 92, 187);
	justify-content: center;
	align-items: center;
	transition: var(--transition);
	cursor: pointer;
	box-shadow: inset 0 0 2rem -2rem var(--bg);
	border: none;
	border-radius: 1rem;
	border-radius: 1rem;
	background-color: var(--accent-color);
	padding-right: 0.7rem;
	padding-left: 0.5rem;
	height: 28px;
	color: var(--bg);
	font-size: 13px;
	white-space: nowrap;

	.emoji-icon {
		position: relative;
		width: 18px;
		height: 18px;
	}

	.emoji-png,
	.emoji-webp {
		position: absolute;
		top: 0;
		left: 0;
		transition: opacity var(--transition);
		width: 18px;
		height: 18px;
	}

	.emoji-png {
		opacity: 1;
	}

	.emoji-webp {
		opacity: 0;
	}

	&:hover {
		.emoji-png {
			opacity: 0;
		}

		.emoji-webp {
			opacity: 1;
		}
	}

	span {
		filter: grayscale(1);
	}

	&:hover {
		color: var(--bg);
	}

	.mdc-button__label {
		display: flex;
		column-gap: 0.5rem;
		align-items: center;
	}
}

::ng-deep body.light-mode {
	.emoji-seeker button {
		.emoji-png,
		.emoji-webp {
			filter: brightness(1.5);
		}
	}
}

.emoji-seeker button::after,
.emoji-seeker button::before {
	content: "";
	--border-angle-1: 0deg;
	--border-angle-2: 90deg;
	--border-angle-3: 180deg;
	display: flex;
	position: absolute;
	animation:
		rotate-background-1 3s linear infinite,
		rotate-background-2 8s linear infinite,
		rotate-background-3 13s linear infinite;
	transition: inherit;
	border: 0;
	border-radius: 1.15rem;
	background-color: transparent;
	padding: var(--border-size);
}

.emoji-seeker button::after {
	top: 0.25rem;
	z-index: -2;
	filter: blur(0.75rem);
	background-image:
		conic-gradient(
			from var(--border-angle-1) at 10% 15%,
			transparent,
			var(--bright-yellow) 10%,
			transparent 30%,
			transparent
		),
		conic-gradient(
			from var(--border-angle-2) at 70% 60%,
			transparent,
			var(--bright-blue) 10%,
			transparent 60%,
			transparent
		),
		conic-gradient(
			from var(--border-angle-3) at 50% 20%,
			transparent,
			var(--bright-yellow) 10%,
			transparent 50%,
			transparent
		);
	width: 100%;
	height: 100%;
}

::ng-deep body.dark-mode {
	.emoji-seeker button::after {
		filter: blur(0.25rem) grayscale(1) !important;
	}
}

.emoji-seeker button::before {
	top: -0.16rem;
	left: -0.16rem;
	z-index: -1;
	background-image:
		linear-gradient(
			color-mix(in srgb, var(--accent-color) 90%, transparent) 40%,
			transparent 80%
		),
		conic-gradient(
			from var(--border-angle-1) at 10% 15%,
			transparent,
			var(--bright-yellow) 10%,
			transparent 30%,
			transparent
		),
		conic-gradient(
			from var(--border-angle-2) at 70% 60%,
			transparent,
			var(--bright-blue) 10%,
			transparent 60%,
			transparent
		),
		conic-gradient(
			from var(--border-angle-3) at 50% 20%,
			transparent,
			var(--bright-yellow) 10%,
			transparent 50%,
			transparent
		),
		linear-gradient(var(--accent-color), rgba(from var(--accent-color) r g b / 0.75));
	width: calc(100% + 0.32rem);
	height: calc(100% + 0.32rem);
}

::ng-deep body.dark-mode {
	.emoji-seeker button::before {
		filter: blur(0) grayscale(1) !important;
	}
}

@keyframes rotate-background-1 {
	to {
		--border-angle-1: 360deg;
	}
}

@keyframes rotate-background-2 {
	to {
		--border-angle-2: -270deg;
	}
}

@keyframes rotate-background-3 {
	to {
		--border-angle-3: 540deg;
	}
}

@property --border-angle-1 {
	syntax: "<angle>";
	inherits: true;
	initial-value: 0deg;
}

@property --border-angle-2 {
	syntax: "<angle>";
	inherits: true;
	initial-value: 90deg;
}

@property --border-angle-3 {
	syntax: "<angle>";
	inherits: true;
	initial-value: 180deg;
}
